#!/usr/bin/env python3
"""
The automatic database generation for TensorAlloy.
"""
import numpy as np
import toml
import tqdm
import matplotlib
from datetime import datetime
from pathlib import Path
from enum import Enum
from ase.io import read, write
from ase.units import GPa, kB
from ase.neighborlist import neighbor_list
from argparse import ArgumentParser
from tensordb.sampler import VaspAimdSampler
from tensordb.calculator import VaspCalculator, VaspPorousCalculator
from tensordb.calculator import VaspNonEquilibriumCalculator
from matplotlib import pyplot as plt



class CalcTaskType(Enum):
    """
    The type of the DFT calculation task.
    """
    calc = "calc"
    porosity = "porosity"
    neq = "neq"


class TensorDB:
    """
    The database generation kit for TensorAlloy.
    """

    def __init__(self, input_file):
        """
        Initialization method.
        """
        self.input_file = input_file
        self.root = Path(input_file).parent
        self.config = dict(toml.load(input_file))
        self.samplers = {
            "aimd": VaspAimdSampler(self.root, self.config),
        }
        self.calculators = {
            "calc": VaspCalculator(self.root, self.config),
        }
        if "porosity" in self.config:
            self.calculators["porosity"] = VaspPorousCalculator(self.root, self.config)
        if "neq" in self.config:
            self.calculators["neq"] = VaspNonEquilibriumCalculator(
                self.root, self.config)

    def purge(self):
        """
        Cleanup all files. Be cautious when using this method.
        """
        for _, sampler in self.samplers.items():
            sampler.purge()
        for calculator in self.calculators.items():
            calculator.purge()

    # --------------------------------------------------------------------------
    # Sampling section
    # --------------------------------------------------------------------------

    def create_sampling_tasks(self, override=False):
        """
        Create sampling tasks.
        """
        for _, sampler in self.samplers.items():
            sampler.create_tasks(override=override)

    def update_sampling_status(self):
        """
        Update the status of all sampling tasks.
        """
        for _, sampler in self.samplers.items():
            sampler.update_status()

    def list_unsubmitted_sampling_tasks(self):
        """
        List unsubmitted sampling tasks.
        """
        for _, sampler in self.samplers.items():
            sampler.list_unsubmitted_tasks()

    # --------------------------------------------------------------------------
    # Post-process section
    # --------------------------------------------------------------------------

    def post_process(self):
        """
        Post-processing all sampling tasks.
        """
        for _, sampler in self.samplers.items():
            sampler.post_process()

    # --------------------------------------------------------------------------
    # High-precision DFT section
    # --------------------------------------------------------------------------

    def create_accurate_dft_tasks(self, calc_type: CalcTaskType):
        """
        Create VASP high precision DFT calculation tasks.
        """
        calculator = self.calculators.get(calc_type.name)
        if calculator is None:
            raise ValueError(f"Calculator type {calc_type.name} not initialized. "
                             f"Maybe you should check config.toml")
        calculator.create_tasks(self.samplers)

    def update_accurate_dft_tasks_status(self):
        """
        Get the status of high precision dft calculations.
        """
        for _, calculator in self.calculators.items():
            calculator.update_status()
        
    # --------------------------------------------------------------------------
    # Make the training dataset
    # --------------------------------------------------------------------------

    def gather(self, output_file=None, nprocs=-2, check_job_status=False):
        """
        Gather all completed high precision DFT calculations into a single file.

        Parameters
        ----------
        output_file : str
            The output file name.
        nprocs : int
            The number of processes to use. Default is -2, which means using all
            available CPUs but one.
        check_job_status : bool
            Check the job status before gathering. Default is False.

        """
        from joblib import Parallel, delayed

        objects = []
        for _, calculator in self.calculators.items():
            all_tasks = [x for x in calculator.task_iterator()]
            results = Parallel(n_jobs=nprocs, verbose=1)(
                delayed(calculator.get_atoms)(taskdir, check_job_status)
                for taskdir in all_tasks
            )
            trajectory = [x for x in results if x is not None]
            print(f"[{calculator.software}/gather]: total {len(trajectory)} structures")
            objects.extend(trajectory)

        if output_file is None:
            date = datetime.now().strftime("%Y%m%d")
            output_dir = self.root / "database"
            output_dir.mkdir(exist_ok=True)
            filename = f"{calculator.software}_N{len(objects)}_{date}.extxyz"
            output_file = output_dir / filename
        write(output_file, objects, format="extxyz")

    # --------------------------------------------------------------------------
    # Plot
    # --------------------------------------------------------------------------

    def plot(self, filename: Path, figname=None, rcut=6.0):
        """
        Plot the database file. Currently, four plots are generated:

        1. Energy vs. Volume
        2. Force Norm vs. Volume
        3. Energy vs. Pressure
        4. Force Norm vs. Pressure

        """
        from scipy.stats import gaussian_kde
        from ase.db import connect

        if filename.suffix == ".db":
            db = connect(filename)
            trajectory = []
            for i in range(len(db)):
                atoms = db.get_atoms(id=i + 1, add_additional_information=True)
                trajectory.append(atoms)
        else:
            trajectory = read(filename, index=":")
        energies = []
        forces = []
        fnorms = []
        volumes = []
        stresses = []
        pressures = []
        rdf = {}
        temperatures = []
        for atoms in tqdm.tqdm(trajectory):
            natoms = len(atoms)
            volumes.append(atoms.get_volume() / natoms)
            energies.append(atoms.get_potential_energy() / natoms)
            forces.extend(atoms.get_forces().flatten().tolist())
            fnorms.append(np.sqrt(np.sum(atoms.get_forces() ** 2) / natoms))
            stresses.extend(atoms.get_stress(voigt=True).flatten().tolist())
            pressures.append(atoms.get_stress(voigt=True)[:3].mean() / -GPa)
            if self.is_finite_temperature:
                temperatures.append(atoms.info["etemperature"] / kB)
            species = atoms.get_chemical_symbols()
            ilist, jlist, dlist = neighbor_list("ijd", atoms, cutoff=rcut)
            for i, j, d in zip(ilist, jlist, dlist):
                key = tuple(sorted((species[i], species[j])))
                if key not in rdf:
                    rdf[key] = []
                rdf[key].append(d)

        volumes = np.asarray(volumes)
        pressures = np.asarray(pressures)
        energies = np.asarray(energies)
        forces = np.asarray(forces)
        fnorms = np.asarray(fnorms)
        stresses = np.asarray(stresses)

        for key in rdf:
            rdf[key] = np.asarray(rdf[key])

        _, axes = plt.subplots(2, 3, figsize=(12, 7))
        cmap = matplotlib.colormaps["viridis"]

        ax = axes[0, 0]
        ax.plot(volumes, energies, "o", markersize=2, color=cmap(0.0))
        ax.set_xlabel("Volume ($\AA^3$)")
        ax.set_ylabel("Energy (eV/atom)")

        ax = axes[0, 1]
        ax.plot(volumes, fnorms, "o", markersize=2, color=cmap(0.2))
        ax.set_xlabel("Volume ($\AA^3$)")
        ax.set_ylabel("Force norm (eV/$\AA$)")

        ax = axes[0, 2]
        density = gaussian_kde(volumes)
        x = np.linspace(volumes.min(), volumes.max(), 100)
        fx = density(x)
        ax.plot(x, fx, label="Volume")
        ax.set_xlabel("Volume ($\AA^3$)")
        ax.set_ylabel("Scaled Density")
    
        if self.is_finite_temperature:
            ax = axes[1, 0]
            ax.plot(volumes, temperatures, "o", markersize=2)
            ax.set_xlabel("Volume ($\AA^3$)")
            ax.set_ylabel("Temperature (K)")

            ax = axes[1, 1]
            ax.plot(pressures, temperatures, "o", markersize=2)
            ax.set_xlabel("Pressure (GPa)")
            ax.set_ylabel("Temperature (K)")
        else:
            ax = axes[1, 0]
            ax.plot(pressures, energies, "o", markersize=2, color=cmap(0.6))
            ax.set_xlabel("Pressure (GPa)")
            ax.set_ylabel("Energy (eV/atom)")

            ax = axes[1, 1]
            ax.plot(pressures, fnorms, "o", markersize=2, color=cmap(0.8))
            ax.set_xlabel("Pressure (GPa)")
            ax.set_ylabel("Force norm (eV/$\AA$)")

        ax = axes[1, 2]
        for key in rdf:
            density = gaussian_kde(rdf[key], weights=1.0 / rdf[key])
            x = np.linspace(0, 6, 100)
            fx = density(np.linspace(0, 6, 100))
            ax.plot(x, fx, label=f"{key[0]}-{key[1]}")
        ax.legend()
        ax.set_xlabel("Distance ($\AA$)")
        ax.set_ylabel("Scaled Density")

        plt.tight_layout()

        if figname is None:
            figname = filename.parent / filename.name.replace(filename.suffix, ".png")
        plt.savefig(figname, dpi=150)
        plt.close()


def main():
    root_parser = ArgumentParser()

    # Common arguments
    root_parser.add_argument(
        "-i", "--input", default="config.toml", help="The input file"
    )

    # Subparsers
    sub_parsers = root_parser.add_subparsers(dest="command", help="Sub-commands")

    # The subparser for creating DFT jobs
    parser = sub_parsers.add_parser("create")
    parser.add_argument("task", choices=["sampling", "calc", "porosity", "neq"], 
                        help="The type of the DFT jobs to create.")
    parser.add_argument(
        "--interval", 
        type=int, 
        default=50, 
        help="The interval (in timesteps) for fetching snapshots from AIMD "
             "trajectories. Only valid for 'calc' tasks.")
    parser.add_argument(
        "--nvt", 
        default=False,
        action="store_true", 
        help="Create NVT sampling jobs. Only valid for 'sampling' tasks.")
    parser.add_argument(
        "--npt", 
        default=False,
        action="store_true", 
        help="Create NPT sampling jobs. Only valid for 'sampling' tasks.")

    # The subparser for AIMD sampling
    parser = sub_parsers.add_parser(
        "sampling", help="Commands for creating sampling tasks."
    )
    parser.add_argument(
        "--ensemble",
        choices=["nvt", "npt"],
        nargs="+",
        default=["nvt", "npt"],
        help="The MD ensemble to use, nvt or npt.",
    )

    # The subparser for getting task status
    parser = sub_parsers.add_parser("status", help="Comannds for getting task status.")
    parser.add_argument(
        "type",
        choices=["sampling", "calc", "unsubmitted"],
        help="Choose the type of status: sampling for AIMD sampling jobs, calc for "
             "high precision DFT calculations, unsubmitted for unsubmitted jobs.",
    )

    # The subparser for plotting
    parser = sub_parsers.add_parser("plot", help="")
    parser.add_argument("filename", type=Path, help="The database file to plot.")
    parser.add_argument("--rcut", type=float, default=6.0, help="The cutoff radius.")

    # The subparser for the post-processing
    parser = sub_parsers.add_parser("postprocess")
    
    # The subparser for gathering calculated results
    parser = sub_parsers.add_parser("gather")

    # The subparser for purging
    parser = sub_parsers.add_parser("purge")

    # Parse the arguments
    args = root_parser.parse_args()
    db = TensorDB(args.input)
    
    if args.command == "create":
        if args.task == "sampling":
            db.create_sampling_tasks(override=True)
        elif args.task == "calc":
            db.create_accurate_dft_tasks(CalcTaskType.calc)
        elif args.task == "porosity":
            db.create_accurate_dft_tasks(CalcTaskType.porosity)
        elif args.task == "neq":
            db.create_accurate_dft_tasks(CalcTaskType.neq)
    elif args.command == "status":
        if args.type == "sampling":
            db.update_sampling_status()
        elif args.type == "calc":
            db.update_accurate_dft_tasks_status()
        elif args.type == "unsubmitted":
            db.list_unsubmitted_sampling_tasks()
    elif args.command == "postprocess":
        db.post_process()
    elif args.command == "gather":
        db.gather()
    elif args.command == "purge":
        db.purge()
    elif args.command == "plot":
        db.plot(filename=args.filename, rcut=args.rcut)


if __name__ == "__main__":
    main()
